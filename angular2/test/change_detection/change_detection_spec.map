{"version":3,"sources":["change_detection_spec.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/874","@traceur/generated/TemplateParser/875","@traceur/generated/TemplateParser/876","@traceur/generated/TemplateParser/877","@traceur/generated/TemplateParser/878","@traceur/generated/TemplateParser/879","@traceur/generated/TemplateParser/9"],"names":[],"mappings":"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","file":"/Users/cburgdorf/Documents/hacking/angular/modules/angular2/test/change_detection/change_detection_spec.js","sourceRoot":"/Users/cburgdorf/Documents/hacking/angular/modules/angular2/test/change_detection/","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, IS_DARTIUM} from 'angular2/test_lib';\n\nimport {isPresent, isBlank, isJsObject, BaseException, FunctionWrapper} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {Parser} from 'angular2/src/change_detection/parser/parser';\nimport {Lexer} from 'angular2/src/change_detection/parser/lexer';\nimport {reflector} from 'angular2/src/reflection/reflection';\nimport {arrayChangesAsString, kvChangesAsString} from './util';\n\nimport {ChangeDispatcher, DynamicChangeDetector, ChangeDetectionError, ContextWithVariableBindings,\n  CHECK_ALWAYS, CHECK_ONCE, CHECKED, DETACHED} from 'angular2/change_detection';\n\n\nimport {JitProtoChangeDetector, DynamicProtoChangeDetector} from 'angular2/src/change_detection/proto_change_detector';\nimport {ChangeDetectionUtil} from 'angular2/src/change_detection/change_detection_util';\n\n\nexport function main() {\n  describe(\"change detection\", () => {\n    StringMapWrapper.forEach(\n      { \"dynamic\": () => new DynamicProtoChangeDetector(),\n        \"JIT\": () => new JitProtoChangeDetector()\n      }, (createProtoChangeDetector, name) => {\n\n        if (name == \"JIT\" && IS_DARTIUM) return;\n\n        function ast(exp:string, location:string = 'location') {\n          var parser = new Parser(new Lexer());\n          return parser.parseBinding(exp, location);\n        }\n\n        function createChangeDetector(memo:string, exp:string, context = null, formatters = null,\n                                             structural = false) {\n          var pcd = createProtoChangeDetector();\n          pcd.addAst(ast(exp), memo, memo, structural);\n\n          var dispatcher = new TestDispatcher();\n          var cd = pcd.instantiate(dispatcher, formatters);\n          cd.setContext(context);\n\n          return {\"changeDetector\" : cd, \"dispatcher\" : dispatcher};\n        }\n\n        function executeWatch(memo:string, exp:string, context = null, formatters = null,\n                              content = false) {\n          var res = createChangeDetector(memo, exp, context, formatters, content);\n          res[\"changeDetector\"].detectChanges();\n          return res[\"dispatcher\"].log;\n        }\n\n        describe(`${name} change detection`, () => {\n          it('should do simple watching', () => {\n            var person = new Person(\"misko\");\n            var c = createChangeDetector('name', 'name', person);\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual(['name=misko']);\n            dispatcher.clear();\n\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual([]);\n            dispatcher.clear();\n\n            person.name = \"Misko\";\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual(['name=Misko']);\n          });\n\n          it('should report all changes on the first run including uninitialized values', () => {\n            expect(executeWatch('value', 'value', new Uninitialized())).toEqual(['value=null']);\n          });\n\n          it('should report all changes on the first run including null values', () => {\n            var td = new TestData(null);\n            expect(executeWatch('a', 'a', td)).toEqual(['a=null']);\n          });\n\n          it(\"should support literals\", () => {\n            expect(executeWatch('const', '10')).toEqual(['const=10']);\n            expect(executeWatch('const', '\"str\"')).toEqual(['const=str']);\n            expect(executeWatch('const', '\"a\\n\\nb\"')).toEqual(['const=a\\n\\nb']);\n          });\n\n          it('simple chained property access', () => {\n            var address = new Address('Grenoble');\n            var person = new Person('Victor', address);\n\n            expect(executeWatch('address.city', 'address.city', person))\n              .toEqual(['address.city=Grenoble']);\n          });\n\n          it(\"should support method calls\", () => {\n            var person = new Person('Victor');\n            expect(executeWatch('m', 'sayHi(\"Jim\")', person)).toEqual(['m=Hi, Jim']);\n          });\n\n          it(\"should support function calls\", () => {\n            var td = new TestData(() => (a) => a);\n            expect(executeWatch('value', 'a()(99)', td)).toEqual(['value=99']);\n          });\n\n          it(\"should support chained method calls\", () => {\n            var person = new Person('Victor');\n            var td = new TestData(person);\n            expect(executeWatch('m', 'a.sayHi(\"Jim\")', td)).toEqual(['m=Hi, Jim']);\n          });\n\n          it(\"should support literal array\", () => {\n            var c = createChangeDetector('array', '[1,2]');\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues).toEqual([[[1, 2]]]);\n\n            c = createChangeDetector('array', '[1,a]', new TestData(2));\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues).toEqual([[[1, 2]]]);\n          });\n\n          it(\"should support literal maps\", () => {\n            var c = createChangeDetector('map', '{z:1}');\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues[0][0]['z']).toEqual(1);\n\n            c = createChangeDetector('map', '{z:a}', new TestData(1));\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues[0][0]['z']).toEqual(1);\n          });\n\n          it(\"should support binary operations\", () => {\n            expect(executeWatch('exp', '10 + 2')).toEqual(['exp=12']);\n            expect(executeWatch('exp', '10 - 2')).toEqual(['exp=8']);\n\n            expect(executeWatch('exp', '10 * 2')).toEqual(['exp=20']);\n            expect(executeWatch('exp', '10 / 2')).toEqual([`exp=${5.0}`]); //dart exp=5.0, js exp=5\n            expect(executeWatch('exp', '11 % 2')).toEqual(['exp=1']);\n\n            expect(executeWatch('exp', '1 == 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '1 != 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '1 < 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 < 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '2 > 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 < 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '1 <= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 <= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 <= 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '2 >= 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 >= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '1 >= 2')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', 'true && true')).toEqual(['exp=true']);\n            expect(executeWatch('exp', 'true && false')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', 'true || false')).toEqual(['exp=true']);\n            expect(executeWatch('exp', 'false || false')).toEqual(['exp=false']);\n          });\n\n          it(\"should support negate\", () => {\n            expect(executeWatch('exp', '!true')).toEqual(['exp=false']);\n            expect(executeWatch('exp', '!!true')).toEqual(['exp=true']);\n          });\n\n          it(\"should support conditionals\", () => {\n            expect(executeWatch('m', '1 < 2 ? 1 : 2')).toEqual(['m=1']);\n            expect(executeWatch('m', '1 > 2 ? 1 : 2')).toEqual(['m=2']);\n          });\n\n          describe(\"keyed access\", () => {\n            it(\"should support accessing a list item\", () => {\n              expect(executeWatch('array[0]', '[\"foo\", \"bar\"][0]')).toEqual(['array[0]=foo']);\n            });\n\n            it(\"should support accessing a map item\", () => {\n              expect(executeWatch('map[foo]', '{\"foo\": \"bar\"}[\"foo\"]')).toEqual(['map[foo]=bar']);\n            });\n          });\n\n          it(\"should support formatters\", () => {\n            var formatters = MapWrapper.createFromPairs([\n              ['uppercase', (v) => v.toUpperCase()],\n              ['wrap', (v, before, after) => `${before}${v}${after}`]]);\n            expect(executeWatch('str', '\"aBc\" | uppercase', null, formatters)).toEqual(['str=ABC']);\n            expect(executeWatch('str', '\"b\" | wrap:\"a\":\"c\"', null, formatters)).toEqual(['str=abc']);\n          });\n\n          it(\"should support interpolation\", () => {\n            var parser = new Parser(new Lexer());\n            var pcd = createProtoChangeDetector();\n            var ast = parser.parseInterpolation(\"B{{a}}A\", \"location\");\n            pcd.addAst(ast, \"memo\", \"memo\", false);\n\n            var dispatcher = new TestDispatcher();\n            var cd = pcd.instantiate(dispatcher, MapWrapper.create());\n            cd.setContext(new TestData(\"value\"));\n\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([\"memo=BvalueA\"]);\n          });\n\n          describe(\"group changes\", () => {\n            it(\"should notify the dispatcher when a group of records changes\", () => {\n              var pcd = createProtoChangeDetector();\n              pcd.addAst(ast(\"1 + 2\"), \"memo\", \"1\");\n              pcd.addAst(ast(\"10 + 20\"), \"memo\", \"1\");\n              pcd.addAst(ast(\"100 + 200\"), \"memo2\", \"2\");\n\n              var dispatcher = new TestDispatcher();\n              var cd = pcd.instantiate(dispatcher, null);\n\n              cd.detectChanges();\n\n              expect(dispatcher.loggedValues).toEqual([[3, 30], [300]]);\n            });\n\n            it(\"should notify the dispatcher before switching to the next group\", () => {\n              var pcd = createProtoChangeDetector();\n              pcd.addAst(ast(\"a()\"), \"a\", \"1\");\n              pcd.addAst(ast(\"b()\"), \"b\", \"2\");\n              pcd.addAst(ast(\"c()\"), \"c\", \"2\");\n\n              var dispatcher = new TestDispatcher();\n              var cd = pcd.instantiate(dispatcher, null);\n\n              var tr = new TestRecord();\n              tr.a = () => {\n                dispatcher.logValue('InvokeA');\n                return 'a'\n              };\n              tr.b = () => {\n                dispatcher.logValue('InvokeB');\n                return 'b'\n              };\n              tr.c = () => {\n                dispatcher.logValue('InvokeC');\n                return 'c'\n              };\n              cd.setContext(tr);\n\n              cd.detectChanges();\n\n              expect(dispatcher.loggedValues).toEqual(['InvokeA', ['a'], 'InvokeB', 'InvokeC', ['b', 'c']]);\n            });\n          });\n\n          describe(\"enforce no new changes\", () => {\n            it(\"should throw when a record gets changed after it has been checked\", () => {\n              var pcd = createProtoChangeDetector();\n              pcd.addAst(ast(\"a\"), \"a\", 1);\n\n              var dispatcher = new TestDispatcher();\n              var cd = pcd.instantiate(dispatcher, null);\n              cd.setContext(new TestData('value'));\n\n              expect(() => {\n                cd.checkNoChanges();\n              }).toThrowError(new RegExp(\"Expression 'a in location' has changed after it was checked\"));\n            });\n          });\n\n          //TODO vsavkin: implement it\n          describe(\"error handling\", () => {\n            xit(\"should wrap exceptions into ChangeDetectionError\", () => {\n              var pcd = createProtoChangeDetector();\n              pcd.addAst(ast('invalidProp', 'someComponent'), \"a\", 1);\n\n              var cd = pcd.instantiate(new TestDispatcher(), null);\n              cd.setContext(null);\n\n              try {\n                cd.detectChanges();\n\n                throw new BaseException(\"fail\");\n              } catch (e) {\n                expect(e).toBeAnInstanceOf(ChangeDetectionError);\n                expect(e.location).toEqual(\"invalidProp in someComponent\");\n              }\n            });\n          });\n\n          describe(\"collections\", () => {\n            it(\"should not register a change when going from null to null\", () => {\n              var context = new TestData(null);\n\n              var c = createChangeDetector('a', 'a', context, null, true);\n              var cd = c[\"changeDetector\"];\n              var dispatcher = c[\"dispatcher\"];\n\n              cd.detectChanges();\n              expect(dispatcher.log).toEqual([]);\n            });\n\n            it(\"should register changes when switching from null to collection and back\", () => {\n              var context = new TestData(null);\n\n              var c = createChangeDetector('a', 'a', context, null, true);\n              var cd = c[\"changeDetector\"];\n              var dispatcher = c[\"dispatcher\"];\n\n              context.a = [0];\n              cd.detectChanges();\n\n              expect(dispatcher.log).toEqual([\"a=\" +\n              arrayChangesAsString({\n                collection: ['0[null->0]'],\n                additions: ['0[null->0]']\n              })\n              ]);\n              dispatcher.clear();\n\n              context.a = null;\n              cd.detectChanges();\n              expect(dispatcher.log).toEqual(['a=null']);\n            });\n\n            describe(\"list\", () => {\n              it(\"should support list changes\", () => {\n                var context = new TestData([1, 2]);\n\n                expect(executeWatch(\"a\", \"a\", context, null, true))\n                  .toEqual([\"a=\" +\n                  arrayChangesAsString({\n                    collection: ['1[null->0]', '2[null->1]'],\n                    additions: ['1[null->0]', '2[null->1]']\n                  })]);\n              });\n\n              it(\"should handle reference changes\", () => {\n                var context = new TestData([1, 2]);\n                var objs = createChangeDetector(\"a\", \"a\", context, null, true);\n                var cd = objs[\"changeDetector\"];\n                var dispatcher = objs[\"dispatcher\"];\n                cd.detectChanges();\n                dispatcher.clear();\n\n                context.a = [2, 1];\n                cd.detectChanges();\n                expect(dispatcher.log).toEqual([\"a=\" +\n                arrayChangesAsString({\n                  collection: ['2[1->0]', '1[0->1]'],\n                  previous: ['1[0->1]', '2[1->0]'],\n                  moves: ['2[1->0]', '1[0->1]']\n                })]);\n              });\n            });\n\n            describe(\"map\", () => {\n              it(\"should support map changes\", () => {\n                var map = MapWrapper.create();\n                MapWrapper.set(map, \"foo\", \"bar\");\n                var context = new TestData(map);\n                expect(executeWatch(\"a\", \"a\", context, null, true))\n                  .toEqual([\"a=\" +\n                  kvChangesAsString({\n                    map: ['foo[null->bar]'],\n                    additions: ['foo[null->bar]']\n                  })]);\n              });\n\n              it(\"should handle reference changes\", () => {\n                var map = MapWrapper.create();\n                MapWrapper.set(map, \"foo\", \"bar\");\n                var context = new TestData(map);\n                var objs = createChangeDetector(\"a\", \"a\", context, null, true);\n                var cd = objs[\"changeDetector\"];\n                var dispatcher = objs[\"dispatcher\"];\n                cd.detectChanges();\n                dispatcher.clear();\n\n                context.a = MapWrapper.create();\n                MapWrapper.set(context.a, \"bar\", \"foo\");\n                cd.detectChanges();\n                expect(dispatcher.log).toEqual([\"a=\" +\n                kvChangesAsString({\n                  map: ['bar[null->foo]'],\n                  previous: ['foo[bar->null]'],\n                  additions: ['bar[null->foo]'],\n                  removals: ['foo[bar->null]']\n                })]);\n              });\n            });\n\n            if (!IS_DARTIUM) {\n              describe(\"js objects\", () => {\n                it(\"should support object changes\", () => {\n                  var map = {\"foo\": \"bar\"};\n                  var context = new TestData(map);\n                  expect(executeWatch(\"a\", \"a\", context, null, true))\n                    .toEqual([\"a=\" +\n                    kvChangesAsString({\n                      map: ['foo[null->bar]'],\n                      additions: ['foo[null->bar]']\n                    })]);\n                });\n              });\n            }\n          });\n\n          describe(\"ContextWithVariableBindings\", () => {\n            it('should read a field from ContextWithVariableBindings', () => {\n              var locals = new ContextWithVariableBindings(null,\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n\n              expect(executeWatch('key', 'key', locals))\n                .toEqual(['key=value']);\n            });\n\n            it('should handle nested ContextWithVariableBindings', () => {\n              var nested = new ContextWithVariableBindings(null,\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n              var locals = new ContextWithVariableBindings(nested, MapWrapper.create());\n\n              expect(executeWatch('key', 'key', locals))\n                .toEqual(['key=value']);\n            });\n\n            it(\"should fall back to a regular field read when ContextWithVariableBindings \" +\n            \"does not have the requested field\", () => {\n              var locals = new ContextWithVariableBindings(new Person(\"Jim\"),\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n\n              expect(executeWatch('name', 'name', locals))\n                .toEqual(['name=Jim']);\n            });\n          });\n\n          describe(\"handle children\", () => {\n            var parent, child;\n\n            beforeEach(() => {\n              var protoParent = createProtoChangeDetector();\n              parent = protoParent.instantiate(null, null);\n\n              var protoChild = createProtoChangeDetector();\n              child = protoChild.instantiate(null, null);\n            });\n\n            it(\"should add children\", () => {\n              parent.addChild(child);\n\n              expect(parent.children.length).toEqual(1);\n              expect(parent.children[0]).toBe(child);\n            });\n\n            it(\"should remove children\", () => {\n              parent.addChild(child);\n              parent.removeChild(child);\n\n              expect(parent.children).toEqual([]);\n            });\n          });\n        });\n\n        describe(\"optimizations\", () => {\n          it(\"should not rerun formatters when args did not change\", () => {\n            var count = 0;\n            var formatters = MapWrapper.createFromPairs([\n              ['count', (v) => {count ++; \"value\"}]]);\n\n            var c = createChangeDetector('a', 'a | count', new TestData(null), formatters);\n            var cd = c[\"changeDetector\"];\n\n            cd.detectChanges();\n\n            expect(count).toEqual(1);\n\n            cd.detectChanges();\n\n            expect(count).toEqual(1);\n          });\n        });\n\n        describe(\"mode\", () => {\n          it(\"should not check a detached change detector\", () => {\n            var c = createChangeDetector('name', 'a', new TestData(\"value\"));\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.mode = DETACHED;\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([]);\n          });\n\n          it(\"should not check a checked change detector\", () => {\n            var c = createChangeDetector('name', 'a', new TestData(\"value\"));\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.mode = CHECKED;\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([]);\n          });\n\n          it(\"should change CHECK_ONCE to CHECKED\", () => {\n            var cd = createProtoChangeDetector().instantiate(null, null);\n            cd.mode = CHECK_ONCE;\n\n            cd.detectChanges();\n\n            expect(cd.mode).toEqual(CHECKED);\n          });\n\n          it(\"should not change the CHECK_ALWAYS\", () => {\n            var cd = createProtoChangeDetector().instantiate(null, null);\n            cd.mode = CHECK_ALWAYS;\n\n            cd.detectChanges();\n\n            expect(cd.mode).toEqual(CHECK_ALWAYS);\n          });\n        });\n\n        describe(\"markPathToRootAsCheckOnce\", () => {\n          function changeDetector(mode, parent) {\n            var cd = createProtoChangeDetector().instantiate(null, null);\n            cd.mode = mode;\n            if (isPresent(parent)) parent.addChild(cd);\n            return cd;\n          }\n\n          it(\"should mark all checked detectors as CHECK_ONCE \" +\n            \"until reaching a detached one\", () => {\n\n            var root = changeDetector(CHECK_ALWAYS, null);\n            var disabled = changeDetector(DETACHED, root);\n            var parent = changeDetector(CHECKED, disabled);\n            var checkAlwaysChild = changeDetector(CHECK_ALWAYS, parent);\n            var checkOnceChild = changeDetector(CHECK_ONCE, checkAlwaysChild);\n            var checkedChild = changeDetector(CHECKED, checkOnceChild);\n\n            checkedChild.markPathToRootAsCheckOnce();\n\n            expect(root.mode).toEqual(CHECK_ALWAYS);\n            expect(disabled.mode).toEqual(DETACHED);\n            expect(parent.mode).toEqual(CHECK_ONCE);\n            expect(checkAlwaysChild.mode).toEqual(CHECK_ALWAYS);\n            expect(checkOnceChild.mode).toEqual(CHECK_ONCE);\n            expect(checkedChild.mode).toEqual(CHECK_ONCE);\n          });\n        });\n      });\n  });\n}\n\nclass TestRecord {\n  a;\n  b;\n  c;\n}\n\nclass Person {\n  name:string;\n  age:number;\n  address:Address;\n  constructor(name:string, address:Address = null) {\n    this.name = name;\n    this.address = address;\n  }\n\n  sayHi(m) {\n    return `Hi, ${m}`;\n  }\n\n  toString():string {\n    var address = this.address == null ? '' : ' address=' + this.address.toString();\n\n    return 'name=' + this.name + address;\n  }\n}\n\nclass Address {\n  city:string;\n  constructor(city:string) {\n    this.city = city;\n  }\n\n  toString():string {\n    return this.city;\n  }\n}\n\nclass Uninitialized {\n  value:any;\n}\n\nclass TestData {\n  a;\n\n  constructor(a) {\n    this.a = a;\n  }\n}\n\nclass TestDispatcher extends ChangeDispatcher {\n  log:List;\n  loggedValues:List;\n  onChange:Function;\n\n  constructor() {\n    super();\n    this.log = null;\n    this.loggedValues = null;\n    this.onChange = (_, __) => {};\n    this.clear();\n  }\n\n  clear() {\n    this.log = ListWrapper.create();\n    this.loggedValues = ListWrapper.create();\n  }\n\n  logValue(value) {\n    ListWrapper.push(this.loggedValues, value);\n  }\n\n  onRecordChange(group, updates:List) {\n    var value = updates[0].change.currentValue;\n    var memento = updates[0].bindingMemento;\n    ListWrapper.push(this.log, memento + '=' + this._asString(value));\n\n    var values = ListWrapper.map(updates, (r) => r.change.currentValue);\n    ListWrapper.push(this.loggedValues, values);\n\n    this.onChange(group, updates);\n  }\n\n\n  _asString(value) {\n    return (isBlank(value) ? 'null' : value.toString());\n  }\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","return assert.returnType(($__placeholder__0), $__placeholder__1)"]}
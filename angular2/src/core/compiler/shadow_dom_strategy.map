{"version":3,"sources":["shadow_dom_strategy.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/24","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"/Users/cburgdorf/Documents/hacking/angular/modules/angular2/src/core/compiler/shadow_dom_strategy.js","sourceRoot":"/Users/cburgdorf/Documents/hacking/angular/modules/angular2/src/core/compiler/","sourcesContent":["import {Type, isBlank, isPresent} from 'angular2/src/facade/lang';\nimport {DOM, Element} from 'angular2/src/facade/dom';\nimport {List, ListWrapper} from 'angular2/src/facade/collection';\nimport {View} from './view';\nimport {Content} from './shadow_dom_emulation/content_tag';\nimport {LightDom} from './shadow_dom_emulation/light_dom';\nimport {DirectiveMetadata} from './directive_metadata';\n\nexport class ShadowDomStrategy {\n  attachTemplate(el:Element, view:View){}\n  constructLightDom(lightDomView:View, shadowDomView:View, el:Element){}\n  polyfillDirectives():List<Type>{ return null; }\n  shim(): boolean { return false; }\n  extractStyles(): boolean { return false; }\n}\n\nexport class EmulatedShadowDomStrategy extends ShadowDomStrategy {\n  constructor() {\n    super();\n  }\n\n  attachTemplate(el:Element, view:View){\n    DOM.clearNodes(el);\n    moveViewNodesIntoParent(el, view);\n  }\n\n  constructLightDom(lightDomView:View, shadowDomView:View, el:Element){\n    return new LightDom(lightDomView, shadowDomView, el);\n  }\n\n  polyfillDirectives():List<Type> {\n    return [Content];\n  }\n\n  shim(): boolean {\n    return true;\n  }\n\n  extractStyles(): boolean {\n    return true;\n  }\n}\n\nexport class NativeShadowDomStrategy extends ShadowDomStrategy {\n  constructor() {\n    super();\n  }\n\n  attachTemplate(el:Element, view:View){\n    moveViewNodesIntoParent(el.createShadowRoot(), view);\n  }\n\n  constructLightDom(lightDomView:View, shadowDomView:View, el:Element){\n    return null;\n  }\n\n  polyfillDirectives():List<Type> {\n    return [];\n  }\n\n  shim(): boolean {\n    return false;\n  }\n\n  extractStyles(): boolean {\n    return false;\n  }\n}\n\nfunction moveViewNodesIntoParent(parent, view) {\n  for (var i = 0; i < view.nodes.length; ++i) {\n    DOM.appendChild(parent, view.nodes[i]);\n  }\n}\n","assert.argumentTypes($__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.genericType($__placeholder__0)","assert.type.$__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}
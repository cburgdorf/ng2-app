{"version":3,"sources":["ast.js","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/2230"],"names":[],"mappings":"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","file":"/Users/cburgdorf/Documents/hacking/angular/modules/angular2/src/change_detection/parser/ast.js","sourceRoot":"/Users/cburgdorf/Documents/hacking/angular/modules/angular2/src/change_detection/parser/","sourcesContent":["import {FIELD, autoConvertAdd, isBlank, isPresent, FunctionWrapper, BaseException} from \"angular2/src/facade/lang\";\nimport {List, Map, ListWrapper, StringMapWrapper} from \"angular2/src/facade/collection\";\nimport {ContextWithVariableBindings} from \"./context_with_variable_bindings\";\n\nexport class AST {\n  eval(context) {\n    throw new BaseException(\"Not supported\");\n  }\n\n  get isAssignable() {\n    return false;\n  }\n\n  assign(context, value) {\n    throw new BaseException(\"Not supported\");\n  }\n\n  visit(visitor) {\n  }\n\n  toString():string {\n    return \"AST\";\n  }\n}\n\nexport class EmptyExpr extends AST {\n  eval(context) {\n    return null;\n  }\n\n  visit(visitor) {\n    //do nothing\n  }\n}\n\nexport class Structural extends AST {\n  value:AST;\n  constructor(value:AST) {\n    super();\n    this.value = value;\n  }\n\n  eval(context) {\n    return value.eval(context);\n  }\n\n  visit(visitor) {\n    return visitor.visitStructural(this);\n  }\n}\n\nexport class ImplicitReceiver extends AST {\n  eval(context) {\n    return context;\n  }\n\n  visit(visitor) {\n    return visitor.visitImplicitReceiver(this);\n  }\n}\n\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport class Chain extends AST {\n  expressions:List;\n  constructor(expressions:List) {\n    super();\n    this.expressions = expressions;\n  }\n\n  eval(context) {\n    var result;\n    for (var i = 0; i < this.expressions.length; i++) {\n      var last = this.expressions[i].eval(context);\n      if (isPresent(last)) result = last;\n    }\n    return result;\n  }\n\n  visit(visitor) {\n    return visitor.visitChain(this);\n  }\n}\n\nexport class Conditional extends AST {\n  condition:AST;\n  trueExp:AST;\n  falseExp:AST;\n  constructor(condition:AST, trueExp:AST, falseExp:AST){\n    super();\n    this.condition = condition;\n    this.trueExp = trueExp;\n    this.falseExp = falseExp;\n  }\n\n  eval(context) {\n    if(this.condition.eval(context)) {\n      return this.trueExp.eval(context);\n    } else {\n      return this.falseExp.eval(context);\n    }\n  }\n\n  visit(visitor) {\n    return visitor.visitConditional(this);\n  }\n}\n\nexport class AccessMember extends AST {\n  receiver:AST;\n  name:string;\n  getter:Function;\n  setter:Function;\n  constructor(receiver:AST, name:string, getter:Function, setter:Function) {\n    super();\n    this.receiver = receiver;\n    this.name = name;\n    this.getter = getter;\n    this.setter = setter;\n  }\n\n  eval(context) {\n    var evaluatedContext = this.receiver.eval(context);\n\n    while (evaluatedContext instanceof ContextWithVariableBindings) {\n      if (evaluatedContext.hasBinding(this.name)) {\n        return evaluatedContext.get(this.name);\n      }\n      evaluatedContext = evaluatedContext.parent;\n    }\n\n    return this.getter(evaluatedContext);\n  }\n\n  get isAssignable() {\n    return true;\n  }\n\n  assign(context, value) {\n    var evaluatedContext = this.receiver.eval(context);\n\n    while (evaluatedContext instanceof ContextWithVariableBindings) {\n      if (evaluatedContext.hasBinding(this.name)) {\n        throw new BaseException(`Cannot reassign a variable binding ${this.name}`)\n      }\n      evaluatedContext = evaluatedContext.parent;\n    }\n\n    return this.setter(evaluatedContext, value);\n  }\n\n  visit(visitor) {\n    return visitor.visitAccessMember(this);\n  }\n}\n\nexport class KeyedAccess extends AST {\n  obj:AST;\n  key:AST;\n  constructor(obj:AST, key:AST) {\n    super();\n    this.obj = obj;\n    this.key = key;\n  }\n\n  eval(context) {\n    var obj = this.obj.eval(context);\n    var key = this.key.eval(context);\n    return obj[key];\n  }\n\n  get isAssignable() {\n    return true;\n  }\n\n  assign(context, value) {\n    var obj = this.obj.eval(context);\n    var key = this.key.eval(context);\n    obj[key] = value;\n    return value;\n  }\n\n  visit(visitor) {\n    return visitor.visitKeyedAccess(this);\n  }\n}\n\nexport class Formatter extends AST {\n  exp:AST;\n  name:string;\n  args:List<AST>;\n  allArgs:List<AST>;\n  constructor(exp:AST, name:string, args:List) {\n    super();\n    this.exp = exp;\n    this.name = name;\n    this.args = args;\n    this.allArgs = ListWrapper.concat([exp], args);\n  }\n\n  visit(visitor) {\n    return visitor.visitFormatter(this);\n  }\n}\n\nexport class LiteralPrimitive extends AST {\n  value;\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  eval(context) {\n    return this.value;\n  }\n\n  visit(visitor) {\n    return visitor.visitLiteralPrimitive(this);\n  }\n}\n\nexport class LiteralArray extends AST {\n  expressions:List;\n  constructor(expressions:List) {\n    super();\n    this.expressions = expressions;\n  }\n\n  eval(context) {\n    return ListWrapper.map(this.expressions, (e) => e.eval(context));\n  }\n\n  visit(visitor) {\n    return visitor.visitLiteralArray(this);\n  }\n}\n\nexport class LiteralMap extends AST {\n  keys:List;\n  values:List;\n  constructor(keys:List, values:List) {\n    super();\n    this.keys = keys;\n    this.values = values;\n  }\n\n  eval(context) {\n    var res = StringMapWrapper.create();\n    for(var i = 0; i < this.keys.length; ++i) {\n      StringMapWrapper.set(res, this.keys[i], this.values[i].eval(context));\n    }\n    return res;\n  }\n\n  visit(visitor) {\n    return visitor.visitLiteralMap(this);\n  }\n}\n\nexport class Interpolation extends AST {\n  strings:List;\n  expressions:List;\n  constructor(strings:List, expressions:List) {\n    super();\n    this.strings = strings;\n    this.expressions = expressions;\n  }\n\n  eval(context) {\n    throw new BaseException(\"evaluating an Interpolation is not supported\");\n  }\n\n  visit(visitor) {\n    visitor.visitInterpolation(this);\n  }\n}\n\nexport class Binary extends AST {\n  operation:string;\n  left:AST;\n  right:AST;\n  constructor(operation:string, left:AST, right:AST) {\n    super();\n    this.operation = operation;\n    this.left = left;\n    this.right = right;\n  }\n\n  eval(context) {\n    var left = this.left.eval(context);\n    switch (this.operation) {\n      case '&&': return left && this.right.eval(context);\n      case '||': return left || this.right.eval(context);\n    }\n    var right = this.right.eval(context);\n\n    switch (this.operation) {\n      case '+'  : return left + right;\n      case '-'  : return left - right;\n      case '*'  : return left * right;\n      case '/'  : return left / right;\n      case '%'  : return left % right;\n      case '==' : return left == right;\n      case '!=' : return left != right;\n      case '<'  : return left < right;\n      case '>'  : return left > right;\n      case '<=' : return left <= right;\n      case '>=' : return left >= right;\n      case '^'  : return left ^ right;\n      case '&'  : return left & right;\n    }\n    throw 'Internal error [$operation] not handled';\n  }\n\n  visit(visitor) {\n    return visitor.visitBinary(this);\n  }\n}\n\nexport class PrefixNot extends AST {\n  expression:AST;\n  constructor(expression:AST) {\n    super();\n    this.expression = expression;\n  }\n\n  eval(context) {\n    return !this.expression.eval(context);\n  }\n\n  visit(visitor) {\n    return visitor.visitPrefixNot(this);\n  }\n}\n\nexport class Assignment extends AST {\n  target:AST;\n  value:AST;\n  constructor(target:AST, value:AST) {\n    super();\n    this.target = target;\n    this.value = value;\n  }\n\n  eval(context) {\n    return this.target.assign(context, this.value.eval(context));\n  }\n\n  visit(visitor) {\n    return visitor.visitAssignment(this);\n  }\n}\n\nexport class MethodCall extends AST {\n  receiver:AST;\n  fn:Function;\n  args:List;\n  name:string;\n  constructor(receiver:AST, name:string, fn:Function, args:List) {\n    super();\n    this.receiver = receiver;\n    this.fn = fn;\n    this.args = args;\n    this.name = name;\n  }\n\n  eval(context) {\n    var evaluatedContext = this.receiver.eval(context);\n    var evaluatedArgs = evalList(context, this.args);\n\n    while (evaluatedContext instanceof ContextWithVariableBindings) {\n      if (evaluatedContext.hasBinding(this.name)) {\n        var fn = evaluatedContext.get(this.name);\n        return FunctionWrapper.apply(fn, evaluatedArgs);\n      }\n      evaluatedContext = evaluatedContext.parent;\n    }\n\n    return this.fn(evaluatedContext, evaluatedArgs);\n  }\n\n  visit(visitor) {\n    return visitor.visitMethodCall(this);\n  }\n}\n\nexport class FunctionCall extends AST {\n  target:AST;\n  args:List;\n  constructor(target:AST, args:List) {\n    super();\n    this.target = target;\n    this.args = args;\n  }\n\n  eval(context) {\n    var obj = this.target.eval(context);\n    if (! (obj instanceof Function)) {\n      throw new BaseException(`${obj} is not a function`);\n    }\n    return FunctionWrapper.apply(obj, evalList(context, this.args));\n  }\n\n  visit(visitor) {\n    return visitor.visitFunctionCall(this);\n  }\n}\n\nexport class ASTWithSource extends AST {\n  ast:AST;\n  source:string;\n  location:string;\n  constructor(ast:AST, source:string, location:string) {\n    super();\n    this.source = source;\n    this.location = location;\n    this.ast = ast;\n  }\n\n  eval(context) {\n    return this.ast.eval(context);\n  }\n\n  get isAssignable() {\n    return this.ast.isAssignable;\n  }\n\n  assign(context, value) {\n    return this.ast.assign(context, value);\n  }\n\n  visit(visitor) {\n    return this.ast.visit(visitor);\n  }\n\n  toString():string {\n    return `${this.source} in ${this.location}`;\n  }\n}\n\nexport class TemplateBinding {\n  key:string;\n  keyIsVar:boolean;\n  name:string;\n  expression:ASTWithSource;\n  constructor(key:string, keyIsVar:boolean, name:string, expression:ASTWithSource) {\n    super();\n    this.key = key;\n    this.keyIsVar = keyIsVar;\n    // only either name or expression will be filled.\n    this.name = name;\n    this.expression = expression;\n  }\n}\n\n//INTERFACE\nexport class AstVisitor {\n  visitAccessMember(ast:AccessMember) {}\n  visitAssignment(ast:Assignment) {}\n  visitBinary(ast:Binary) {}\n  visitChain(ast:Chain){}\n  visitStructural(ast:Structural) {}\n  visitConditional(ast:Conditional) {}\n  visitFormatter(ast:Formatter) {}\n  visitFunctionCall(ast:FunctionCall) {}\n  visitImplicitReceiver(ast:ImplicitReceiver) {}\n  visitKeyedAccess(ast:KeyedAccess) {}\n  visitLiteralArray(ast:LiteralArray) {}\n  visitLiteralMap(ast:LiteralMap) {}\n  visitLiteralPrimitive(ast:LiteralPrimitive) {}\n  visitMethodCall(ast:MethodCall) {}\n  visitPrefixNot(ast:PrefixNot) {}\n}\n\nvar _evalListCache = [[],[0],[0,0],[0,0,0],[0,0,0,0],[0,0,0,0,0]];\nfunction evalList(context, exps:List){\n  var length = exps.length;\n  var result = _evalListCache[length];\n  for (var i = 0; i < length; i++) {\n    result[i] = exps[i].eval(context);\n  }\n  return result;\n}\n","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.type.$__placeholder__0)","assert.argumentTypes($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.any"]}
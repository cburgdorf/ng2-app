{"version":3,"sources":["proto_change_detector.js","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/1"],"names":[],"mappings":"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","file":"/Users/tbosch/projects/angular2/modules/angular2/src/change_detection/proto_change_detector.js","sourceRoot":"/Users/tbosch/projects/angular2/modules/angular2/src/change_detection/","sourcesContent":["import {isPresent, isBlank, BaseException, Type, isString} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {\n  AccessMember,\n  Assignment,\n  AST,\n  ASTWithSource,\n  AstVisitor,\n  Binary,\n  Chain,\n  Structural,\n  Conditional,\n  Formatter,\n  FunctionCall,\n  ImplicitReceiver,\n  Interpolation,\n  KeyedAccess,\n  LiteralArray,\n  LiteralMap,\n  LiteralPrimitive,\n  MethodCall,\n  PrefixNot\n  } from './parser/ast';\n\nimport {ChangeRecord, ChangeDispatcher, ChangeDetector} from './interfaces';\nimport {ChangeDetectionUtil} from './change_detection_util';\nimport {DynamicChangeDetector} from './dynamic_change_detector';\nimport {ChangeDetectorJITGenerator} from './change_detection_jit_generator';\nimport {PipeRegistry} from './pipes/pipe_registry';\n\nimport {coalesce} from './coalesce';\n\nexport const RECORD_TYPE_SELF = 0;\nexport const RECORD_TYPE_CONST = 1;\nexport const RECORD_TYPE_PRIMITIVE_OP = 2;\nexport const RECORD_TYPE_PROPERTY = 3;\nexport const RECORD_TYPE_INVOKE_METHOD = 4;\nexport const RECORD_TYPE_INVOKE_CLOSURE = 5;\nexport const RECORD_TYPE_KEYED_ACCESS = 6;\nexport const RECORD_TYPE_INVOKE_FORMATTER = 7;\nexport const RECORD_TYPE_STRUCTURAL_CHECK = 8;\nexport const RECORD_TYPE_INTERPOLATE = 9;\n\nexport class ProtoRecord {\n  mode:number;\n  name:string;\n  funcOrValue:any;\n  args:List;\n  fixedArgs:List;\n  contextIndex:number;\n  selfIndex:number;\n  bindingMemento:any;\n  directiveMemento:any;\n  lastInBinding:boolean;\n  lastInDirective:boolean;\n  expressionAsString:string;\n\n  constructor(mode:number,\n              name:string,\n              funcOrValue,\n              args:List,\n              fixedArgs:List,\n              contextIndex:number,\n              selfIndex:number,\n              bindingMemento:any,\n              directiveMemento:any,\n              expressionAsString:string,\n              lastInBinding:boolean,\n              lastInDirective:boolean) {\n\n    this.mode = mode;\n    this.name = name;\n    this.funcOrValue = funcOrValue;\n    this.args = args;\n    this.fixedArgs = fixedArgs;\n    this.contextIndex = contextIndex;\n    this.selfIndex = selfIndex;\n    this.bindingMemento = bindingMemento;\n    this.directiveMemento = directiveMemento;\n    this.lastInBinding = lastInBinding;\n    this.lastInDirective = lastInDirective;\n    this.expressionAsString = expressionAsString;\n  }\n\n  isPureFunction():boolean {\n    return this.mode === RECORD_TYPE_INTERPOLATE ||\n      this.mode === RECORD_TYPE_INVOKE_FORMATTER ||\n      this.mode === RECORD_TYPE_PRIMITIVE_OP;\n  }\n}\n\n\nexport class ProtoChangeDetector  {\n  addAst(ast:AST, bindingMemento:any, directiveMemento:any = null, structural:boolean = false){}\n  instantiate(dispatcher:any, formatters:Map):ChangeDetector{\n    return null;\n  }\n}\n\nexport class DynamicProtoChangeDetector extends ProtoChangeDetector {\n  _records:List<ProtoRecord>;\n  _recordBuilder:ProtoRecordBuilder;\n  _pipeRegistry:PipeRegistry;\n\n  constructor(pipeRegistry:PipeRegistry) {\n    super();\n    this._pipeRegistry = pipeRegistry;\n    this._records = null;\n    this._recordBuilder = new ProtoRecordBuilder();\n  }\n\n  addAst(ast:AST, bindingMemento:any, directiveMemento:any = null, structural:boolean = false) {\n    this._recordBuilder.addAst(ast, bindingMemento, directiveMemento, structural);\n  }\n\n  instantiate(dispatcher:any, formatters:Map) {\n    this._createRecordsIfNecessary();\n    return new DynamicChangeDetector(dispatcher, formatters,\n      this._pipeRegistry, this._records);\n  }\n\n  _createRecordsIfNecessary() {\n    if (isBlank(this._records)) {\n      var records = this._recordBuilder.records;\n      this._records = coalesce(records);\n    }\n  }\n}\n\nvar _jitProtoChangeDetectorClassCounter:number = 0;\nexport class JitProtoChangeDetector extends ProtoChangeDetector {\n  _factory:Function;\n  _recordBuilder:ProtoRecordBuilder;\n  _pipeRegistry;\n\n  constructor(pipeRegistry) {\n    super();\n    this._pipeRegistry = pipeRegistry;\n    this._factory = null;\n    this._recordBuilder = new ProtoRecordBuilder();\n  }\n\n  addAst(ast:AST, bindingMemento:any, directiveMemento:any = null, structural:boolean = false) {\n    this._recordBuilder.addAst(ast, bindingMemento, directiveMemento, structural);\n  }\n\n  instantiate(dispatcher:any, formatters:Map) {\n    this._createFactoryIfNecessary();\n    return this._factory(dispatcher, formatters, this._pipeRegistry);\n  }\n\n  _createFactoryIfNecessary() {\n    if (isBlank(this._factory)) {\n      var c = _jitProtoChangeDetectorClassCounter++;\n      var records = coalesce(this._recordBuilder.records);\n      var typeName = `ChangeDetector${c}`;\n      this._factory = new ChangeDetectorJITGenerator(typeName, records).generate();\n    }\n  }\n}\n\nclass ProtoRecordBuilder {\n  records:List<ProtoRecord>;\n\n  constructor() {\n    this.records = [];\n  }\n\n  addAst(ast:AST, bindingMemento:any, directiveMemento:any = null, structural:boolean = false) {\n    if (structural) ast = new Structural(ast);\n\n    var last = ListWrapper.last(this.records);\n    if (isPresent(last) && last.directiveMemento == directiveMemento) {\n      last.lastInDirective = false;\n    }\n\n    var pr = _ConvertAstIntoProtoRecords.convert(ast, bindingMemento, directiveMemento, this.records.length);\n    if (! ListWrapper.isEmpty(pr)) {\n      var last = ListWrapper.last(pr);\n      last.lastInBinding = true;\n      last.lastInDirective = true;\n\n      this.records = ListWrapper.concat(this.records, pr);\n    }\n  }\n}\n\nclass _ConvertAstIntoProtoRecords {\n  protoRecords:List;\n  bindingMemento:any;\n  directiveMemento:any;\n  contextIndex:number;\n  expressionAsString:string;\n\n  constructor(bindingMemento:any, directiveMemento:any, contextIndex:number, expressionAsString:string) {\n    this.protoRecords = [];\n    this.bindingMemento = bindingMemento;\n    this.directiveMemento = directiveMemento;\n    this.contextIndex = contextIndex;\n    this.expressionAsString = expressionAsString;\n  }\n\n  static convert(ast:AST, bindingMemento:any, directiveMemento:any, contextIndex:number) {\n    var c = new _ConvertAstIntoProtoRecords(bindingMemento, directiveMemento, contextIndex, ast.toString());\n    ast.visit(c);\n    return c.protoRecords;\n  }\n\n  visitImplicitReceiver(ast:ImplicitReceiver) {\n    return 0;\n  }\n\n  visitInterpolation(ast:Interpolation) {\n    var args = this._visitAll(ast.expressions);\n    return this._addRecord(RECORD_TYPE_INTERPOLATE, \"interpolate\", _interpolationFn(ast.strings),\n      args, ast.strings, 0);\n  }\n\n  visitLiteralPrimitive(ast:LiteralPrimitive) {\n    return this._addRecord(RECORD_TYPE_CONST, \"literal\", ast.value, [], null, 0);\n  }\n\n  visitAccessMember(ast:AccessMember) {\n    var receiver = ast.receiver.visit(this);\n    return this._addRecord(RECORD_TYPE_PROPERTY, ast.name, ast.getter, [], null, receiver);\n  }\n\n  visitFormatter(ast:Formatter) {\n    return this._addRecord(RECORD_TYPE_INVOKE_FORMATTER, ast.name, ast.name, this._visitAll(ast.allArgs), null, 0);\n  }\n\n  visitMethodCall(ast:MethodCall) {\n    var receiver = ast.receiver.visit(this);\n    var args = this._visitAll(ast.args);\n    return this._addRecord(RECORD_TYPE_INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);\n  }\n\n  visitFunctionCall(ast:FunctionCall) {\n    var target = ast.target.visit(this);\n    var args = this._visitAll(ast.args);\n    return this._addRecord(RECORD_TYPE_INVOKE_CLOSURE, \"closure\", null, args, null, target);\n  }\n\n  visitLiteralArray(ast:LiteralArray) {\n    var primitiveName = `arrayFn${ast.expressions.length}`;\n    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, primitiveName, _arrayFn(ast.expressions.length),\n      this._visitAll(ast.expressions), null, 0);\n  }\n\n  visitLiteralMap(ast:LiteralMap) {\n    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, _mapPrimitiveName(ast.keys),\n      ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);\n  }\n\n  visitBinary(ast:Binary) {\n    var left = ast.left.visit(this);\n    var right = ast.right.visit(this);\n    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, _operationToPrimitiveName(ast.operation),\n      _operationToFunction(ast.operation), [left, right], null, 0);\n  }\n\n  visitPrefixNot(ast:PrefixNot) {\n    var exp = ast.expression.visit(this)\n    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, \"operation_negate\",\n      ChangeDetectionUtil.operation_negate, [exp], null, 0);\n  }\n\n  visitConditional(ast:Conditional) {\n    var c = ast.condition.visit(this);\n    var t = ast.trueExp.visit(this);\n    var f = ast.falseExp.visit(this);\n    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, \"cond\",\n      ChangeDetectionUtil.cond, [c,t,f], null, 0);\n  }\n\n  visitStructural(ast:Structural) {\n    var value = ast.value.visit(this);\n    return this._addRecord(RECORD_TYPE_STRUCTURAL_CHECK, \"structural\", null, [], null, value);\n  }\n\n  visitKeyedAccess(ast:KeyedAccess) {\n    var obj = ast.obj.visit(this);\n    var key = ast.key.visit(this);\n    return this._addRecord(RECORD_TYPE_KEYED_ACCESS, \"keyedAccess\",\n      ChangeDetectionUtil.keyedAccess, [key], null, obj);\n  }\n\n  _visitAll(asts:List) {\n    var res = ListWrapper.createFixedSize(asts.length);\n    for (var i = 0; i < asts.length; ++i) {\n      res[i] = asts[i].visit(this);\n    }\n    return res;\n  }\n\n  _addRecord(type, name, funcOrValue, args, fixedArgs, context) {\n    var selfIndex = ++ this.contextIndex;\n    ListWrapper.push(this.protoRecords,\n      new ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, selfIndex,\n        this.bindingMemento, this.directiveMemento, this.expressionAsString, false, false));\n    return selfIndex;\n  }\n}\n\n\nfunction _arrayFn(length:number):Function {\n  switch (length) {\n    case 0: return ChangeDetectionUtil.arrayFn0;\n    case 1: return ChangeDetectionUtil.arrayFn1;\n    case 2: return ChangeDetectionUtil.arrayFn2;\n    case 3: return ChangeDetectionUtil.arrayFn3;\n    case 4: return ChangeDetectionUtil.arrayFn4;\n    case 5: return ChangeDetectionUtil.arrayFn5;\n    case 6: return ChangeDetectionUtil.arrayFn6;\n    case 7: return ChangeDetectionUtil.arrayFn7;\n    case 8: return ChangeDetectionUtil.arrayFn8;\n    case 9: return ChangeDetectionUtil.arrayFn9;\n    default: throw new BaseException(`Does not support literal maps with more than 9 elements`);\n  }\n}\n\nfunction _mapPrimitiveName(keys:List) {\n  var stringifiedKeys = ListWrapper.join(\n    ListWrapper.map(keys, (k) => isString(k) ? `\"${k}\"` : `${k}`),\n    \", \");\n  return `mapFn([${stringifiedKeys}])`;\n}\n\nfunction _operationToPrimitiveName(operation:string):string {\n  switch(operation) {\n    case '+'  : return \"operation_add\";\n    case '-'  : return \"operation_subtract\";\n    case '*'  : return \"operation_multiply\";\n    case '/'  : return \"operation_divide\";\n    case '%'  : return \"operation_remainder\";\n    case '==' : return \"operation_equals\";\n    case '!=' : return \"operation_not_equals\";\n    case '<'  : return \"operation_less_then\";\n    case '>'  : return \"operation_greater_then\";\n    case '<=' : return \"operation_less_or_equals_then\";\n    case '>=' : return \"operation_greater_or_equals_then\";\n    case '&&' : return \"operation_logical_and\";\n    case '||' : return \"operation_logical_or\";\n    default: throw new BaseException(`Unsupported operation ${operation}`);\n  }\n}\n\nfunction _operationToFunction(operation:string):Function {\n  switch(operation) {\n    case '+'  : return ChangeDetectionUtil.operation_add;\n    case '-'  : return ChangeDetectionUtil.operation_subtract;\n    case '*'  : return ChangeDetectionUtil.operation_multiply;\n    case '/'  : return ChangeDetectionUtil.operation_divide;\n    case '%'  : return ChangeDetectionUtil.operation_remainder;\n    case '==' : return ChangeDetectionUtil.operation_equals;\n    case '!=' : return ChangeDetectionUtil.operation_not_equals;\n    case '<'  : return ChangeDetectionUtil.operation_less_then;\n    case '>'  : return ChangeDetectionUtil.operation_greater_then;\n    case '<=' : return ChangeDetectionUtil.operation_less_or_equals_then;\n    case '>=' : return ChangeDetectionUtil.operation_greater_or_equals_then;\n    case '&&' : return ChangeDetectionUtil.operation_logical_and;\n    case '||' : return ChangeDetectionUtil.operation_logical_or;\n    default: throw new BaseException(`Unsupported operation ${operation}`);\n  }\n}\n\nfunction s(v) {\n  return isPresent(v) ? `${v}` : '';\n}\n\nfunction _interpolationFn(strings:List) {\n  var length = strings.length;\n  var c0 = length > 0 ? strings[0] : null;\n  var c1 = length > 1 ? strings[1] : null;\n  var c2 = length > 2 ? strings[2] : null;\n  var c3 = length > 3 ? strings[3] : null;\n  var c4 = length > 4 ? strings[4] : null;\n  var c5 = length > 5 ? strings[5] : null;\n  var c6 = length > 6 ? strings[6] : null;\n  var c7 = length > 7 ? strings[7] : null;\n  var c8 = length > 8 ? strings[8] : null;\n  var c9 = length > 9 ? strings[9] : null;\n  switch (length - 1) {\n    case 1: return (a1) => c0 + s(a1) + c1;\n    case 2: return (a1, a2) =>  c0 + s(a1) + c1 + s(a2) + c2;\n    case 3: return (a1, a2, a3) =>  c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3;\n    case 4: return (a1, a2, a3, a4) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4;\n    case 5: return (a1, a2, a3, a4, a5) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;\n    case 6: return (a1, a2, a3, a4, a5, a6) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;\n    case 7: return (a1, a2, a3, a4, a5, a6, a7) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7;\n    case 8: return (a1, a2, a3, a4, a5, a6, a7, a8) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8;\n    case 9: return (a1, a2, a3, a4, a5, a6, a7, a8, a9) => c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8 + s(a9) + c9;\n    default: throw new BaseException(`Does not support more than 9 expressions`);\n  }\n}","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)"]}
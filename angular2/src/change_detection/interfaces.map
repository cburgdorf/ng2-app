{"version":3,"sources":["interfaces.js","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/1"],"names":[],"mappings":"AAAA,KAAO,EAAC,IAAG,CAAC,KAAO,iCAA+B,CAAC;AAEnD,KAAO,MAAM,aAAW;AACtB,AAGA,YAAU,CAAE,cAAa,CAAG,CAAA,MAAK,CAAG;AAClC,OAAG,eAAe,EAAI,eAAa,CAAC;AACpC,OAAG,OAAO,EAAI,OAAK,CAAC;EACtB;AAAA,AAGA,IAAI,aAAW,EAAI;AACjB,SAAO,CAAA,IAAG,OAAO,aAAa,CAAC;EACjC;AAAA,AAEA,IAAI,cAAY,EAAI;AAClB,SAAO,CAAA,IAAG,OAAO,cAAc,CAAC;EAClC;AAAA,AACF;AAAA,AAOA,KAAO,CAAM,KAAA,CAAA,UAAS,EAAE,aAAW,CAAC;AAAA,AAMpC,KAAO,CAAM,KAAA,CAAA,OAAM,EAAE,UAAQ,CAAC;AAAA,AAM9B,KAAO,CAAM,KAAA,CAAA,YAAW,EAAE,eAAa,CAAC;AAAA,AAMxC,KAAO,CAAM,KAAA,CAAA,QAAO,EAAE,WAAS,CAAC;AAAA,AAEhC,KAAO,MAAM,iBAAe;AAC1B,eAAa,CAAE,gBAAe,CAAG,CAAA,OAAM,AAAmB,CAAG,GAAC;AAAA,AAChE;AAAA,AChDA,KAAK,eAAe,AAAC,yDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,gBCD1B,MAAK,YAAY,AF+C0B,CAAA,IAAG,CAAE,aAAW,CAAC,AE/CxB,GDCa;EAAC,CAAC,CAAC,CAAC;ADiDrD,KAAO,MAAM,eAAa;AACxB,AAGA,SAAO,CAAE,EAAC,AAAe,CAAG,GAAC;AAAA,AAC7B,YAAU,CAAE,EAAC,AAAe,CAAG,GAAC;AAAA,AAChC,OAAK,CAAE,AAAD,CAAG,GAAC;AAAA,AACV,WAAS,CAAE,OAAM,AAAI,CAAG,GAAC;AAAA,AACzB,0BAAwB,CAAE,AAAD,CAAG,GAAC;AAAA,AAE7B,cAAY,CAAE,AAAD,CAAG,GAAC;AAAA,AACjB,eAAa,CAAE,AAAD,CAAG,GAAC;AAAA,AACpB;AAAA,AC9DA,KAAK,eAAe,AAAC,iDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YDqDZ,cAAa,GCrDsB;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,oDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YDsDT,cAAa,GCtDmB;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,mDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YED1B,MAAK,KAAK,OFCuC;EAAC,CAAC,CAAC,CAAC;AD8DrD","file":"/Users/tbosch/projects/angular2/modules/angular2/src/change_detection/interfaces.js","sourceRoot":"/Users/tbosch/projects/angular2/modules/angular2/src/change_detection/","sourcesContent":["import {List} from 'angular2/src/facade/collection';\n\nexport class ChangeRecord {\n  bindingMemento:any;\n  change:any;\n\n  constructor(bindingMemento, change) {\n    this.bindingMemento = bindingMemento;\n    this.change = change;\n  }\n\n  //REMOVE IT\n  get currentValue() {\n    return this.change.currentValue;\n  }\n\n  get previousValue() {\n    return this.change.previousValue;\n  }\n}\n\n\n/**\n * CHECK_ONCE means that after calling detectChanges the mode of the change detector\n * will become CHECKED.\n */\nexport const CHECK_ONCE=\"CHECK_ONCE\";\n\n/**\n * CHECKED means that the change detector should be skipped until its mode changes to\n * CHECK_ONCE or CHECK_ALWAYS.\n */\nexport const CHECKED=\"CHECKED\";\n\n/**\n * CHECK_ALWAYS means that after calling detectChanges the mode of the change detector\n * will remain CHECK_ALWAYS.\n */\nexport const CHECK_ALWAYS=\"ALWAYS_CHECK\";\n\n/**\n * DETACHED means that the change detector sub tree is not a part of the main tree and\n * should be skipped.\n */\nexport const DETACHED=\"DETACHED\";\n\nexport class ChangeDispatcher {\n  onRecordChange(directiveMemento, records:List<ChangeRecord>) {}\n}\n\nexport class ChangeDetector {\n  parent:ChangeDetector;\n  mode:string;\n\n  addChild(cd:ChangeDetector) {}\n  removeChild(cd:ChangeDetector) {}\n  remove() {}\n  setContext(context:any) {}\n  markPathToRootAsCheckOnce() {}\n\n  detectChanges() {}\n  checkNoChanges() {}\n}\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)","assert.type.$__placeholder__0)"]}